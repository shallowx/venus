/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 267.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 4.0], [8.8, 4.0], [8.9, 4.0], [9.0, 4.0], [9.1, 4.0], [9.2, 4.0], [9.3, 4.0], [9.4, 4.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 8.0], [18.9, 8.0], [19.0, 8.0], [19.1, 8.0], [19.2, 8.0], [19.3, 8.0], [19.4, 8.0], [19.5, 8.0], [19.6, 8.0], [19.7, 8.0], [19.8, 8.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 10.0], [24.9, 10.0], [25.0, 10.0], [25.1, 10.0], [25.2, 10.0], [25.3, 10.0], [25.4, 10.0], [25.5, 10.0], [25.6, 10.0], [25.7, 10.0], [25.8, 10.0], [25.9, 10.0], [26.0, 10.0], [26.1, 10.0], [26.2, 10.0], [26.3, 10.0], [26.4, 10.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 11.0], [27.7, 11.0], [27.8, 11.0], [27.9, 11.0], [28.0, 11.0], [28.1, 11.0], [28.2, 11.0], [28.3, 11.0], [28.4, 11.0], [28.5, 11.0], [28.6, 11.0], [28.7, 11.0], [28.8, 11.0], [28.9, 11.0], [29.0, 11.0], [29.1, 11.0], [29.2, 11.0], [29.3, 11.0], [29.4, 11.0], [29.5, 11.0], [29.6, 11.0], [29.7, 11.0], [29.8, 11.0], [29.9, 11.0], [30.0, 11.0], [30.1, 11.0], [30.2, 11.0], [30.3, 12.0], [30.4, 12.0], [30.5, 12.0], [30.6, 12.0], [30.7, 12.0], [30.8, 12.0], [30.9, 12.0], [31.0, 12.0], [31.1, 12.0], [31.2, 12.0], [31.3, 12.0], [31.4, 12.0], [31.5, 12.0], [31.6, 12.0], [31.7, 12.0], [31.8, 12.0], [31.9, 12.0], [32.0, 12.0], [32.1, 12.0], [32.2, 12.0], [32.3, 12.0], [32.4, 12.0], [32.5, 12.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 13.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 13.0], [35.0, 13.0], [35.1, 13.0], [35.2, 13.0], [35.3, 13.0], [35.4, 13.0], [35.5, 13.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 14.0], [36.1, 14.0], [36.2, 14.0], [36.3, 14.0], [36.4, 14.0], [36.5, 14.0], [36.6, 14.0], [36.7, 14.0], [36.8, 14.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 15.0], [38.3, 15.0], [38.4, 15.0], [38.5, 15.0], [38.6, 15.0], [38.7, 15.0], [38.8, 15.0], [38.9, 15.0], [39.0, 15.0], [39.1, 15.0], [39.2, 15.0], [39.3, 15.0], [39.4, 15.0], [39.5, 15.0], [39.6, 15.0], [39.7, 15.0], [39.8, 15.0], [39.9, 15.0], [40.0, 15.0], [40.1, 15.0], [40.2, 15.0], [40.3, 15.0], [40.4, 15.0], [40.5, 15.0], [40.6, 15.0], [40.7, 15.0], [40.8, 15.0], [40.9, 16.0], [41.0, 16.0], [41.1, 16.0], [41.2, 16.0], [41.3, 16.0], [41.4, 16.0], [41.5, 16.0], [41.6, 16.0], [41.7, 16.0], [41.8, 16.0], [41.9, 16.0], [42.0, 16.0], [42.1, 16.0], [42.2, 16.0], [42.3, 16.0], [42.4, 16.0], [42.5, 16.0], [42.6, 16.0], [42.7, 16.0], [42.8, 16.0], [42.9, 16.0], [43.0, 16.0], [43.1, 16.0], [43.2, 16.0], [43.3, 16.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 17.0], [43.8, 17.0], [43.9, 17.0], [44.0, 17.0], [44.1, 17.0], [44.2, 17.0], [44.3, 17.0], [44.4, 17.0], [44.5, 17.0], [44.6, 17.0], [44.7, 17.0], [44.8, 17.0], [44.9, 17.0], [45.0, 17.0], [45.1, 17.0], [45.2, 17.0], [45.3, 17.0], [45.4, 17.0], [45.5, 17.0], [45.6, 17.0], [45.7, 17.0], [45.8, 17.0], [45.9, 17.0], [46.0, 17.0], [46.1, 17.0], [46.2, 17.0], [46.3, 17.0], [46.4, 17.0], [46.5, 17.0], [46.6, 17.0], [46.7, 17.0], [46.8, 18.0], [46.9, 18.0], [47.0, 18.0], [47.1, 18.0], [47.2, 18.0], [47.3, 18.0], [47.4, 18.0], [47.5, 18.0], [47.6, 18.0], [47.7, 18.0], [47.8, 18.0], [47.9, 18.0], [48.0, 18.0], [48.1, 18.0], [48.2, 18.0], [48.3, 18.0], [48.4, 18.0], [48.5, 18.0], [48.6, 18.0], [48.7, 18.0], [48.8, 18.0], [48.9, 18.0], [49.0, 18.0], [49.1, 18.0], [49.2, 18.0], [49.3, 18.0], [49.4, 18.0], [49.5, 18.0], [49.6, 18.0], [49.7, 18.0], [49.8, 18.0], [49.9, 18.0], [50.0, 18.0], [50.1, 18.0], [50.2, 19.0], [50.3, 19.0], [50.4, 19.0], [50.5, 19.0], [50.6, 19.0], [50.7, 19.0], [50.8, 19.0], [50.9, 19.0], [51.0, 19.0], [51.1, 19.0], [51.2, 19.0], [51.3, 19.0], [51.4, 19.0], [51.5, 19.0], [51.6, 19.0], [51.7, 19.0], [51.8, 19.0], [51.9, 19.0], [52.0, 19.0], [52.1, 19.0], [52.2, 19.0], [52.3, 19.0], [52.4, 19.0], [52.5, 19.0], [52.6, 19.0], [52.7, 19.0], [52.8, 19.0], [52.9, 19.0], [53.0, 19.0], [53.1, 19.0], [53.2, 19.0], [53.3, 19.0], [53.4, 19.0], [53.5, 19.0], [53.6, 19.0], [53.7, 19.0], [53.8, 19.0], [53.9, 19.0], [54.0, 19.0], [54.1, 19.0], [54.2, 20.0], [54.3, 20.0], [54.4, 20.0], [54.5, 20.0], [54.6, 20.0], [54.7, 20.0], [54.8, 20.0], [54.9, 20.0], [55.0, 20.0], [55.1, 20.0], [55.2, 20.0], [55.3, 20.0], [55.4, 20.0], [55.5, 20.0], [55.6, 20.0], [55.7, 20.0], [55.8, 20.0], [55.9, 20.0], [56.0, 20.0], [56.1, 20.0], [56.2, 20.0], [56.3, 20.0], [56.4, 20.0], [56.5, 20.0], [56.6, 20.0], [56.7, 20.0], [56.8, 20.0], [56.9, 20.0], [57.0, 20.0], [57.1, 20.0], [57.2, 20.0], [57.3, 20.0], [57.4, 20.0], [57.5, 20.0], [57.6, 20.0], [57.7, 20.0], [57.8, 20.0], [57.9, 20.0], [58.0, 20.0], [58.1, 20.0], [58.2, 20.0], [58.3, 20.0], [58.4, 20.0], [58.5, 20.0], [58.6, 21.0], [58.7, 21.0], [58.8, 21.0], [58.9, 21.0], [59.0, 21.0], [59.1, 21.0], [59.2, 21.0], [59.3, 21.0], [59.4, 21.0], [59.5, 21.0], [59.6, 21.0], [59.7, 21.0], [59.8, 21.0], [59.9, 21.0], [60.0, 21.0], [60.1, 21.0], [60.2, 21.0], [60.3, 21.0], [60.4, 21.0], [60.5, 21.0], [60.6, 21.0], [60.7, 21.0], [60.8, 21.0], [60.9, 21.0], [61.0, 21.0], [61.1, 21.0], [61.2, 21.0], [61.3, 21.0], [61.4, 21.0], [61.5, 21.0], [61.6, 21.0], [61.7, 21.0], [61.8, 21.0], [61.9, 21.0], [62.0, 21.0], [62.1, 21.0], [62.2, 21.0], [62.3, 21.0], [62.4, 21.0], [62.5, 21.0], [62.6, 21.0], [62.7, 21.0], [62.8, 21.0], [62.9, 21.0], [63.0, 21.0], [63.1, 21.0], [63.2, 21.0], [63.3, 21.0], [63.4, 21.0], [63.5, 21.0], [63.6, 21.0], [63.7, 22.0], [63.8, 22.0], [63.9, 22.0], [64.0, 22.0], [64.1, 22.0], [64.2, 22.0], [64.3, 22.0], [64.4, 22.0], [64.5, 22.0], [64.6, 22.0], [64.7, 22.0], [64.8, 22.0], [64.9, 22.0], [65.0, 22.0], [65.1, 22.0], [65.2, 22.0], [65.3, 22.0], [65.4, 22.0], [65.5, 22.0], [65.6, 22.0], [65.7, 22.0], [65.8, 22.0], [65.9, 22.0], [66.0, 22.0], [66.1, 22.0], [66.2, 22.0], [66.3, 22.0], [66.4, 22.0], [66.5, 22.0], [66.6, 22.0], [66.7, 22.0], [66.8, 22.0], [66.9, 22.0], [67.0, 22.0], [67.1, 22.0], [67.2, 22.0], [67.3, 22.0], [67.4, 22.0], [67.5, 22.0], [67.6, 22.0], [67.7, 22.0], [67.8, 22.0], [67.9, 22.0], [68.0, 22.0], [68.1, 22.0], [68.2, 22.0], [68.3, 22.0], [68.4, 23.0], [68.5, 23.0], [68.6, 23.0], [68.7, 23.0], [68.8, 23.0], [68.9, 23.0], [69.0, 23.0], [69.1, 23.0], [69.2, 23.0], [69.3, 23.0], [69.4, 23.0], [69.5, 23.0], [69.6, 23.0], [69.7, 23.0], [69.8, 23.0], [69.9, 23.0], [70.0, 23.0], [70.1, 23.0], [70.2, 23.0], [70.3, 23.0], [70.4, 23.0], [70.5, 23.0], [70.6, 23.0], [70.7, 23.0], [70.8, 23.0], [70.9, 23.0], [71.0, 23.0], [71.1, 23.0], [71.2, 23.0], [71.3, 23.0], [71.4, 23.0], [71.5, 23.0], [71.6, 23.0], [71.7, 23.0], [71.8, 23.0], [71.9, 24.0], [72.0, 24.0], [72.1, 24.0], [72.2, 24.0], [72.3, 24.0], [72.4, 24.0], [72.5, 24.0], [72.6, 24.0], [72.7, 24.0], [72.8, 24.0], [72.9, 24.0], [73.0, 24.0], [73.1, 24.0], [73.2, 24.0], [73.3, 24.0], [73.4, 24.0], [73.5, 24.0], [73.6, 24.0], [73.7, 24.0], [73.8, 24.0], [73.9, 24.0], [74.0, 24.0], [74.1, 24.0], [74.2, 24.0], [74.3, 24.0], [74.4, 24.0], [74.5, 24.0], [74.6, 24.0], [74.7, 24.0], [74.8, 24.0], [74.9, 24.0], [75.0, 25.0], [75.1, 25.0], [75.2, 25.0], [75.3, 25.0], [75.4, 25.0], [75.5, 25.0], [75.6, 25.0], [75.7, 25.0], [75.8, 25.0], [75.9, 25.0], [76.0, 25.0], [76.1, 25.0], [76.2, 25.0], [76.3, 25.0], [76.4, 25.0], [76.5, 25.0], [76.6, 25.0], [76.7, 25.0], [76.8, 25.0], [76.9, 25.0], [77.0, 25.0], [77.1, 25.0], [77.2, 25.0], [77.3, 25.0], [77.4, 25.0], [77.5, 25.0], [77.6, 26.0], [77.7, 26.0], [77.8, 26.0], [77.9, 26.0], [78.0, 26.0], [78.1, 26.0], [78.2, 26.0], [78.3, 26.0], [78.4, 26.0], [78.5, 26.0], [78.6, 26.0], [78.7, 26.0], [78.8, 26.0], [78.9, 26.0], [79.0, 26.0], [79.1, 26.0], [79.2, 26.0], [79.3, 26.0], [79.4, 26.0], [79.5, 26.0], [79.6, 26.0], [79.7, 26.0], [79.8, 27.0], [79.9, 27.0], [80.0, 27.0], [80.1, 27.0], [80.2, 27.0], [80.3, 27.0], [80.4, 27.0], [80.5, 27.0], [80.6, 27.0], [80.7, 27.0], [80.8, 27.0], [80.9, 27.0], [81.0, 27.0], [81.1, 27.0], [81.2, 27.0], [81.3, 27.0], [81.4, 27.0], [81.5, 27.0], [81.6, 27.0], [81.7, 28.0], [81.8, 28.0], [81.9, 28.0], [82.0, 28.0], [82.1, 28.0], [82.2, 28.0], [82.3, 28.0], [82.4, 28.0], [82.5, 28.0], [82.6, 28.0], [82.7, 28.0], [82.8, 28.0], [82.9, 28.0], [83.0, 28.0], [83.1, 28.0], [83.2, 28.0], [83.3, 28.0], [83.4, 28.0], [83.5, 29.0], [83.6, 29.0], [83.7, 29.0], [83.8, 29.0], [83.9, 29.0], [84.0, 29.0], [84.1, 29.0], [84.2, 29.0], [84.3, 29.0], [84.4, 29.0], [84.5, 29.0], [84.6, 29.0], [84.7, 29.0], [84.8, 29.0], [84.9, 29.0], [85.0, 29.0], [85.1, 29.0], [85.2, 30.0], [85.3, 30.0], [85.4, 30.0], [85.5, 30.0], [85.6, 30.0], [85.7, 30.0], [85.8, 30.0], [85.9, 30.0], [86.0, 30.0], [86.1, 30.0], [86.2, 30.0], [86.3, 30.0], [86.4, 30.0], [86.5, 30.0], [86.6, 30.0], [86.7, 31.0], [86.8, 31.0], [86.9, 31.0], [87.0, 31.0], [87.1, 31.0], [87.2, 31.0], [87.3, 31.0], [87.4, 31.0], [87.5, 31.0], [87.6, 31.0], [87.7, 31.0], [87.8, 31.0], [87.9, 31.0], [88.0, 31.0], [88.1, 32.0], [88.2, 32.0], [88.3, 32.0], [88.4, 32.0], [88.5, 32.0], [88.6, 32.0], [88.7, 32.0], [88.8, 32.0], [88.9, 32.0], [89.0, 32.0], [89.1, 32.0], [89.2, 32.0], [89.3, 33.0], [89.4, 33.0], [89.5, 33.0], [89.6, 33.0], [89.7, 33.0], [89.8, 33.0], [89.9, 33.0], [90.0, 33.0], [90.1, 33.0], [90.2, 33.0], [90.3, 33.0], [90.4, 33.0], [90.5, 34.0], [90.6, 34.0], [90.7, 34.0], [90.8, 34.0], [90.9, 34.0], [91.0, 34.0], [91.1, 34.0], [91.2, 34.0], [91.3, 34.0], [91.4, 35.0], [91.5, 35.0], [91.6, 35.0], [91.7, 35.0], [91.8, 35.0], [91.9, 35.0], [92.0, 35.0], [92.1, 35.0], [92.2, 35.0], [92.3, 36.0], [92.4, 36.0], [92.5, 36.0], [92.6, 36.0], [92.7, 36.0], [92.8, 36.0], [92.9, 36.0], [93.0, 37.0], [93.1, 37.0], [93.2, 37.0], [93.3, 37.0], [93.4, 37.0], [93.5, 38.0], [93.6, 38.0], [93.7, 38.0], [93.8, 38.0], [93.9, 38.0], [94.0, 39.0], [94.1, 39.0], [94.2, 39.0], [94.3, 39.0], [94.4, 40.0], [94.5, 40.0], [94.6, 40.0], [94.7, 41.0], [94.8, 41.0], [94.9, 41.0], [95.0, 42.0], [95.1, 42.0], [95.2, 43.0], [95.3, 43.0], [95.4, 44.0], [95.5, 44.0], [95.6, 45.0], [95.7, 45.0], [95.8, 46.0], [95.9, 47.0], [96.0, 47.0], [96.1, 48.0], [96.2, 49.0], [96.3, 50.0], [96.4, 51.0], [96.5, 52.0], [96.6, 53.0], [96.7, 55.0], [96.8, 56.0], [96.9, 58.0], [97.0, 60.0], [97.1, 62.0], [97.2, 65.0], [97.3, 68.0], [97.4, 71.0], [97.5, 76.0], [97.6, 81.0], [97.7, 86.0], [97.8, 90.0], [97.9, 93.0], [98.0, 96.0], [98.1, 98.0], [98.2, 101.0], [98.3, 104.0], [98.4, 106.0], [98.5, 109.0], [98.6, 111.0], [98.7, 112.0], [98.8, 114.0], [98.9, 115.0], [99.0, 117.0], [99.1, 118.0], [99.2, 120.0], [99.3, 122.0], [99.4, 124.0], [99.5, 127.0], [99.6, 129.0], [99.7, 133.0], [99.8, 139.0], [99.9, 149.0], [100.0, 267.0]], "isOverall": false, "label": "jimmyli", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4300.0, "minX": 0.0, "maxY": 1.0724429E7, "series": [{"data": [[0.0, 1.0724429E7], [100.0, 197508.0], [200.0, 4300.0]], "isOverall": false, "label": "jimmyli", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0926237E7, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1.0926237E7, "series": [{"data": [[0.0, 1.0926237E7]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 988.3574470599867, "minX": 1.72485984E12, "maxY": 1000.0, "series": [{"data": [[1.72486002E12, 1000.0], [1.72485984E12, 988.3574470599867], [1.7248599E12, 1000.0], [1.72486008E12, 1000.0], [1.72486014E12, 998.4738503153147], [1.72485996E12, 1000.0]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72486014E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 120.5, "series": [{"data": [[2.0, 0.20000000000000004], [3.0, 0.24999999999999997], [4.0, 0.0], [6.0, 0.0], [10.0, 0.0], [12.0, 0.0], [17.0, 0.0], [20.0, 1.0], [24.0, 1.0], [26.0, 0.5], [29.0, 0.0], [31.0, 0.0], [33.0, 0.0], [34.0, 3.0], [37.0, 2.0], [38.0, 0.0], [40.0, 2.5], [45.0, 4.0], [47.0, 4.0], [46.0, 4.0], [48.0, 3.0], [97.0, 30.099999999999994], [98.0, 27.0], [99.0, 32.0], [101.0, 19.0], [102.0, 34.333333333333336], [103.0, 25.999999999999996], [104.0, 8.0], [105.0, 18.89024390243903], [106.0, 4.714285714285714], [107.0, 5.0], [108.0, 3.5777777777777775], [111.0, 2.6666666666666665], [110.0, 2.0], [115.0, 10.142857142857142], [117.0, 2.5384615384615383], [118.0, 1.0], [119.0, 1.6666666666666667], [116.0, 3.75], [120.0, 1.7391304347826084], [123.0, 6.0], [124.0, 0.75], [126.0, 4.25], [127.0, 1.6666666666666667], [129.0, 1.5714285714285716], [130.0, 2.0], [131.0, 3.0], [132.0, 1.6111111111111112], [133.0, 2.214285714285715], [134.0, 1.5], [135.0, 1.9500000000000002], [128.0, 0.0], [136.0, 0.75], [137.0, 2.0], [139.0, 2.3043478260869574], [140.0, 1.6296296296296293], [141.0, 1.4444444444444444], [142.0, 2.0], [143.0, 1.7999999999999998], [144.0, 1.25], [145.0, 1.8181818181818181], [146.0, 2.166666666666667], [147.0, 1.852941176470588], [148.0, 1.722222222222222], [151.0, 1.4482758620689653], [150.0, 0.33333333333333337], [149.0, 0.0], [153.0, 1.3529411764705879], [154.0, 0.8333333333333334], [157.0, 0.8666666666666667], [159.0, 0.8999999999999999], [158.0, 0.0], [156.0, 0.0], [152.0, 1.0], [160.0, 1.379310344827586], [161.0, 0.875], [162.0, 1.0], [163.0, 1.0000000000000002], [164.0, 1.0], [165.0, 1.3513513513513513], [166.0, 1.0], [167.0, 1.3076923076923077], [168.0, 1.1666666666666667], [169.0, 1.0000000000000002], [172.0, 1.0], [173.0, 0.9122807017543859], [174.0, 0.75], [175.0, 0.8333333333333334], [171.0, 0.0], [170.0, 0.0], [176.0, 0.8518518518518517], [177.0, 0.33333333333333337], [178.0, 0.6666666666666666], [179.0, 0.6499999999999999], [180.0, 0.7192982456140349], [182.0, 0.5384615384615384], [183.0, 0.5], [181.0, 1.0], [184.0, 0.14285714285714288], [185.0, 0.8000000000000002], [186.0, 0.8604651162790696], [187.0, 0.6486486486486482], [188.0, 0.7999999999999999], [189.0, 0.0], [190.0, 0.8181818181818183], [191.0, 1.0], [193.0, 0.8928571428571427], [195.0, 0.7777777777777778], [196.0, 0.3333333333333333], [197.0, 0.8157894736842106], [198.0, 0.3333333333333333], [199.0, 0.8124999999999999], [194.0, 1.0], [200.0, 1.1111111111111112], [201.0, 0.6428571428571427], [202.0, 0.5675675675675675], [203.0, 0.47058823529411764], [205.0, 0.7499999999999999], [206.0, 0.5897435897435896], [207.0, 0.6666666666666667], [204.0, 1.0], [208.0, 1.0], [209.0, 0.8571428571428572], [212.0, 0.7972972972972973], [215.0, 1.0], [214.0, 0.33333333333333337], [213.0, 0.0], [210.0, 0.0], [216.0, 2.071428571428571], [217.0, 0.75], [218.0, 0.5], [219.0, 1.0], [220.0, 0.8571428571428572], [222.0, 0.8295454545454544], [223.0, 0.4], [227.0, 0.8043478260869564], [228.0, 0.0], [229.0, 0.6444444444444446], [230.0, 1.0], [231.0, 1.0], [226.0, 0.0], [225.0, 0.3333333333333333], [224.0, 0.33333333333333337], [233.0, 0.6756756756756755], [235.0, 1.0], [236.0, 0.6422018348623857], [238.0, 0.0], [237.0, 0.0], [234.0, 0.0], [232.0, 1.0], [240.0, 0.7272727272727272], [241.0, 0.8928571428571428], [242.0, 0.8695652173913042], [243.0, 0.5], [244.0, 1.0], [245.0, 1.0384615384615388], [247.0, 0.875], [246.0, 1.0], [248.0, 0.8333333333333334], [249.0, 0.36], [250.0, 0.9473684210526315], [252.0, 1.1052631578947367], [253.0, 1.0], [254.0, 1.0], [255.0, 1.0652173913043481], [251.0, 0.33333333333333337], [258.0, 1.2], [256.0, 1.0], [257.0, 1.0], [259.0, 0.7692307692307692], [268.0, 1.0], [269.0, 1.125], [270.0, 0.6744186046511625], [271.0, 0.2222222222222222], [260.0, 0.9102564102564101], [261.0, 1.0], [262.0, 1.0], [263.0, 0.8196721311475411], [264.0, 0.5806451612903226], [265.0, 1.6666666666666667], [266.0, 0.9999999999999999], [267.0, 1.090909090909091], [275.0, 0.907692307692308], [273.0, 0.6818181818181819], [272.0, 0.923076923076923], [274.0, 1.4285714285714286], [277.0, 0.9166666666666666], [276.0, 1.25], [278.0, 0.7192982456140351], [280.0, 1.1111111111111112], [286.0, 0.8275862068965518], [287.0, 0.2], [284.0, 1.0434782608695652], [285.0, 0.9999999999999997], [281.0, 0.5555555555555556], [282.0, 0.923076923076923], [283.0, 0.9130434782608695], [289.0, 0.5], [288.0, 0.9428571428571426], [290.0, 1.2727272727272732], [291.0, 2.25], [292.0, 1.7777777777777777], [293.0, 2.357142857142857], [294.0, 1.1162790697674423], [295.0, 1.3], [296.0, 0.9090909090909091], [302.0, 1.0], [303.0, 1.8888888888888886], [300.0, 1.0], [301.0, 1.5625], [297.0, 1.1052631578947367], [298.0, 1.1166666666666663], [299.0, 0.8], [307.0, 1.4666666666666668], [305.0, 2.0], [304.0, 1.4285714285714286], [311.0, 1.0], [306.0, 1.0714285714285716], [308.0, 2.4736842105263164], [309.0, 2.75], [310.0, 1.0], [312.0, 3.0], [318.0, 0.9074074074074072], [319.0, 2.0], [316.0, 2.0], [317.0, 1.357142857142857], [313.0, 1.6666666666666667], [314.0, 1.9999999999999998], [315.0, 1.5121951219512195], [322.0, 1.6515151515151516], [321.0, 3.0], [320.0, 5.0], [323.0, 1.1], [332.0, 1.3333333333333333], [333.0, 1.0], [334.0, 0.9569892473118284], [335.0, 1.0], [324.0, 1.4], [325.0, 1.0476190476190477], [326.0, 0.5], [327.0, 1.2999999999999998], [328.0, 1.1428571428571432], [329.0, 1.0], [330.0, 0.7500000000000001], [331.0, 1.3333333333333333], [337.0, 1.0], [336.0, 1.0], [338.0, 0.5], [339.0, 0.6666666666666666], [340.0, 0.7647058823529412], [341.0, 0.8], [342.0, 0.5263157894736843], [343.0, 1.0], [344.0, 1.3333333333333333], [350.0, 0.9285714285714285], [351.0, 0.25], [348.0, 0.7333333333333333], [349.0, 0.8333333333333334], [345.0, 0.7391304347826088], [346.0, 1.0], [347.0, 0.8749999999999999], [353.0, 1.1600000000000004], [354.0, 1.2000000000000004], [355.0, 1.6666666666666667], [364.0, 1.2380952380952381], [366.0, 1.2068965517241383], [365.0, 1.210526315789474], [367.0, 1.0714285714285716], [356.0, 1.1075268817204305], [357.0, 0.9499999999999998], [358.0, 0.9473684210526315], [359.0, 1.2222222222222223], [352.0, 1.0], [360.0, 0.5], [361.0, 0.9333333333333333], [362.0, 1.1226415094339621], [363.0, 1.2000000000000002], [375.0, 1.0], [371.0, 1.2777777777777781], [370.0, 0.6666666666666666], [369.0, 1.125], [368.0, 1.3333333333333333], [372.0, 1.32], [373.0, 1.076923076923077], [374.0, 1.146341463414634], [377.0, 1.0], [379.0, 1.4705882352941178], [378.0, 1.0], [380.0, 1.3181818181818186], [381.0, 1.7619047619047619], [382.0, 1.1785714285714286], [383.0, 1.0], [376.0, 0.8999999999999999], [385.0, 1.2500000000000002], [384.0, 0.9333333333333332], [386.0, 1.5], [387.0, 1.8000000000000003], [389.0, 1.5], [388.0, 1.0], [390.0, 1.8571428571428572], [391.0, 1.5454545454545452], [392.0, 1.653846153846154], [393.0, 0.18181818181818182], [399.0, 1.1176470588235297], [398.0, 1.0], [397.0, 1.0], [396.0, 0.7999999999999999], [394.0, 0.9230769230769232], [395.0, 1.4142857142857144], [413.0, 1.0], [406.0, 1.4215686274509793], [400.0, 1.2743362831858407], [407.0, 1.0], [412.0, 0.923076923076923], [403.0, 1.2], [402.0, 1.05], [401.0, 0.5714285714285714], [405.0, 1.0], [404.0, 1.4999999999999998], [408.0, 0.9090909090909091], [409.0, 0.5789473684210527], [410.0, 0.9600000000000004], [411.0, 1.3084112149532705], [414.0, 1.2500000000000002], [415.0, 0.4], [417.0, 1.0270270270270274], [416.0, 0.375], [419.0, 1.25], [418.0, 1.0], [428.0, 1.0], [429.0, 0.8928571428571431], [430.0, 1.3333333333333333], [431.0, 1.0769230769230773], [420.0, 1.8823529411764708], [421.0, 0.5555555555555556], [423.0, 1.0], [424.0, 0.6842105263157896], [425.0, 0.7777777777777778], [426.0, 0.8169014084507041], [427.0, 0.8999999999999999], [433.0, 1.090909090909091], [432.0, 1.1250000000000002], [434.0, 1.3333333333333333], [435.0, 1.2222222222222223], [436.0, 1.0], [437.0, 1.2500000000000002], [438.0, 1.0454545454545456], [439.0, 1.0], [440.0, 1.1250000000000002], [446.0, 1.1666666666666665], [447.0, 4.461538461538462], [444.0, 1.0], [445.0, 1.3157894736842108], [441.0, 1.5294117647058827], [442.0, 1.5], [443.0, 1.7142857142857142], [460.0, 1.4375], [451.0, 1.1428571428571428], [455.0, 1.0], [449.0, 0.6315789473684211], [450.0, 1.0], [453.0, 2.0], [452.0, 4.555555555555555], [454.0, 1.7142857142857142], [456.0, 1.426229508196721], [457.0, 2.0], [459.0, 0.22222222222222227], [458.0, 0.5], [461.0, 2.0000000000000004], [462.0, 2.5438596491228065], [463.0, 2.3548387096774195], [465.0, 3.4285714285714284], [464.0, 3.25], [467.0, 3.4639175257731964], [466.0, 1.0], [476.0, 1.6666666666666665], [477.0, 1.5], [478.0, 2.566666666666667], [479.0, 1.0], [468.0, 1.5000000000000002], [470.0, 3.2545454545454553], [471.0, 2.3749999999999996], [472.0, 1.0769230769230769], [473.0, 3.0000000000000004], [475.0, 2.6666666666666665], [474.0, 1.0], [481.0, 3.2068965517241375], [480.0, 2.2857142857142865], [482.0, 2.818181818181818], [483.0, 3.242424242424242], [484.0, 1.7142857142857142], [485.0, 3.0952380952380945], [486.0, 3.538461538461539], [487.0, 1.2], [488.0, 1.9], [495.0, 2.4782608695652173], [494.0, 1.0], [492.0, 3.0000000000000004], [493.0, 2.880000000000001], [489.0, 3.070588235294118], [490.0, 1.2222222222222223], [491.0, 2.3333333333333335], [508.0, 1.35], [496.0, 1.3333333333333333], [497.0, 3.0659340659340653], [499.0, 2.3333333333333335], [498.0, 2.4615384615384612], [502.0, 3.1515151515151514], [501.0, 3.0], [500.0, 3.0], [503.0, 1.3200000000000003], [505.0, 0.3125], [506.0, 1.0555555555555558], [507.0, 1.552941176470588], [509.0, 1.0606060606060608], [511.0, 1.1176470588235292], [504.0, 0.0], [510.0, 0.8], [518.0, 11.54054054054054], [513.0, 1.0], [512.0, 1.0], [527.0, 1.8571428571428572], [524.0, 1.0], [525.0, 1.0], [526.0, 0.75], [522.0, 0.857142857142857], [523.0, 0.6], [514.0, 6.019230769230768], [515.0, 0.0], [516.0, 1.0], [517.0, 1.0], [519.0, 1.25], [536.0, 0.9444444444444444], [537.0, 1.6], [538.0, 1.2], [539.0, 0.7142857142857143], [541.0, 0.33333333333333337], [540.0, 0.25], [542.0, 1.3058823529411765], [543.0, 1.9374999999999998], [528.0, 1.6000000000000003], [529.0, 1.0], [530.0, 1.0000000000000002], [532.0, 1.1363636363636367], [531.0, 0.16666666666666669], [533.0, 0.7333333333333333], [534.0, 2.3230769230769237], [535.0, 1.0], [520.0, 0.8666666666666667], [521.0, 0.7647058823529411], [547.0, 1.4285714285714286], [544.0, 1.6153846153846154], [558.0, 0.7777777777777778], [559.0, 1.1250000000000007], [556.0, 4.1000000000000005], [557.0, 0.7647058823529411], [554.0, 2.7333333333333334], [555.0, 1.0], [545.0, 1.0], [546.0, 2.5], [548.0, 0.6], [549.0, 2.1818181818181817], [550.0, 0.962962962962963], [551.0, 2.828571428571429], [560.0, 0.9230769230769232], [574.0, 2.2], [575.0, 1.7246376811594206], [572.0, 1.0], [573.0, 0.5], [570.0, 1.4375], [571.0, 1.533333333333333], [568.0, 1.857142857142857], [569.0, 1.7538461538461538], [561.0, 1.3076923076923077], [562.0, 1.4375], [563.0, 1.2222222222222223], [565.0, 1.9666666666666666], [567.0, 1.5], [552.0, 1.6956521739130437], [553.0, 1.380952380952381], [582.0, 1.4285714285714286], [577.0, 1.2272727272727273], [576.0, 1.4117647058823528], [590.0, 1.3252032520325217], [591.0, 0.8000000000000002], [588.0, 0.7500000000000001], [589.0, 1.7878787878787883], [586.0, 1.0952380952380953], [587.0, 1.0833333333333337], [578.0, 0.7500000000000001], [579.0, 0.2222222222222222], [580.0, 1.4583333333333333], [581.0, 0.9166666666666666], [583.0, 1.8636363636363633], [600.0, 1.7142857142857142], [601.0, 1.6666666666666667], [602.0, 16.636363636363637], [603.0, 1.3962264150943393], [604.0, 1.7750000000000001], [605.0, 0.5789473684210525], [606.0, 1.4750000000000005], [607.0, 1.8124999999999998], [592.0, 1.4117647058823526], [595.0, 1.853658536585366], [594.0, 0.829787234042553], [593.0, 0.0], [597.0, 1.75], [598.0, 1.7419354838709677], [599.0, 0.9743589743589746], [584.0, 2.1081081081081083], [585.0, 1.9782608695652177], [614.0, 1.0454545454545456], [610.0, 1.652173913043478], [608.0, 1.6249999999999998], [609.0, 1.0], [623.0, 2.0], [621.0, 2.3125], [622.0, 3.444444444444444], [618.0, 1.372549019607843], [619.0, 0.0], [620.0, 0.28571428571428575], [611.0, 2.5], [612.0, 1.1199999999999997], [613.0, 1.3333333333333335], [615.0, 0.941176470588235], [632.0, 1.2000000000000002], [633.0, 1.1791044776119406], [634.0, 0.5882352941176471], [635.0, 1.0833333333333335], [636.0, 0.9428571428571431], [637.0, 1.2068965517241386], [638.0, 1.0999999999999999], [639.0, 1.5777777777777775], [625.0, 2.9629629629629632], [624.0, 0.5000000000000001], [626.0, 1.5714285714285712], [627.0, 0.9444444444444444], [628.0, 1.0], [629.0, 0.8333333333333331], [631.0, 0.7499999999999999], [630.0, 0.9444444444444443], [616.0, 1.4090909090909092], [617.0, 4.333333333333333], [647.0, 1.3666666666666663], [641.0, 1.1333333333333335], [640.0, 1.2], [655.0, 0.8846153846153849], [653.0, 2.2903225806451615], [654.0, 1.9696969696969697], [642.0, 1.2187500000000002], [643.0, 0.4375000000000001], [646.0, 0.7441860465116279], [645.0, 1.0], [644.0, 0.5000000000000001], [656.0, 1.130434782608696], [671.0, 2.197674418604651], [669.0, 0.9743589743589746], [668.0, 1.0], [670.0, 3.0588235294117636], [666.0, 2.4915254237288136], [667.0, 1.6956521739130441], [664.0, 2.0], [665.0, 1.5], [657.0, 2.0175438596491233], [658.0, 1.4062499999999993], [659.0, 1.75], [660.0, 2.428571428571429], [661.0, 3.0], [662.0, 2.6862745098039222], [663.0, 2.0625], [648.0, 2.125], [649.0, 2.051724137931034], [650.0, 2.45], [651.0, 0.23809523809523808], [652.0, 1.153846153846154], [677.0, 1.4666666666666666], [673.0, 2.2857142857142856], [672.0, 1.2121212121212126], [686.0, 1.9090909090909094], [685.0, 1.0], [684.0, 1.1153846153846154], [687.0, 1.8225806451612907], [674.0, 2.052631578947368], [675.0, 1.2857142857142856], [676.0, 1.4186046511627906], [688.0, 1.5000000000000002], [702.0, 1.0], [700.0, 3.204301075268817], [701.0, 1.9600000000000004], [698.0, 2.008130081300813], [699.0, 3.435897435897437], [696.0, 3.382352941176471], [679.0, 1.0], [678.0, 2.0], [697.0, 3.435483870967742], [689.0, 2.3846153846153846], [691.0, 2.157303370786517], [695.0, 1.3571428571428572], [692.0, 2.0], [680.0, 1.7333333333333345], [681.0, 2.2051282051282057], [682.0, 1.8148148148148153], [683.0, 1.7464788732394365], [711.0, 1.1071428571428574], [707.0, 1.0], [706.0, 1.585365853658536], [704.0, 3.0], [718.0, 1.0], [717.0, 0.818991097922849], [719.0, 1.2586206896551726], [708.0, 1.0], [709.0, 2.0303030303030307], [710.0, 2.1068702290076335], [720.0, 1.5], [734.0, 0.25], [735.0, 1.1333333333333335], [732.0, 1.0], [733.0, 0.22222222222222227], [730.0, 1.1851851851851858], [731.0, 1.1176470588235299], [728.0, 0.7931034482758622], [729.0, 1.3333333333333333], [721.0, 0.9565217391304348], [722.0, 0.9473684210526315], [723.0, 0.6804123711340204], [724.0, 0.75], [725.0, 0.6666666666666666], [726.0, 0.6458333333333334], [727.0, 0.49999999999999994], [712.0, 1.9166666666666663], [713.0, 1.5287356321839083], [715.0, 1.9230769230769231], [714.0, 0.7500000000000001], [716.0, 1.6986301369863013], [743.0, 1.2380952380952384], [737.0, 1.2166666666666672], [736.0, 1.5], [750.0, 1.6923076923076927], [751.0, 1.7659574468085113], [748.0, 1.466666666666667], [749.0, 1.6666666666666667], [738.0, 1.2162162162162165], [739.0, 1.0], [740.0, 1.230769230769231], [742.0, 1.1224489795918373], [752.0, 2.666666666666667], [767.0, 1.0000000000000002], [765.0, 1.1545454545454543], [766.0, 0.736842105263158], [763.0, 1.0], [762.0, 5.0], [761.0, 0.33333333333333337], [760.0, 0.0], [764.0, 1.3636363636363638], [753.0, 1.2868852459016396], [754.0, 1.4], [755.0, 1.0000000000000002], [756.0, 1.2926829268292688], [757.0, 1.5806451612903227], [758.0, 0.7200000000000001], [759.0, 1.088235294117647], [744.0, 1.0], [745.0, 1.3333333333333333], [746.0, 1.2096774193548387], [747.0, 1.611111111111111], [771.0, 1.2571428571428576], [768.0, 1.6666666666666667], [783.0, 1.1], [781.0, 0.8315789473684211], [782.0, 0.9090909090909092], [779.0, 1.0], [780.0, 0.8913043478260869], [769.0, 0.375], [770.0, 1.3181818181818183], [772.0, 1.5], [773.0, 1.164179104477612], [774.0, 1.0087719298245612], [775.0, 0.6666666666666666], [785.0, 0.3], [784.0, 0.0], [798.0, 1.1562499999999996], [799.0, 1.0], [796.0, 0.9230769230769231], [797.0, 0.28571428571428575], [794.0, 1.0], [795.0, 1.0952380952380956], [792.0, 1.0000000000000002], [793.0, 1.047619047619048], [786.0, 1.4285714285714284], [787.0, 1.2133333333333338], [788.0, 1.0], [789.0, 1.1800000000000006], [790.0, 1.166666666666667], [791.0, 0.7317073170731708], [776.0, 1.0], [777.0, 0.33333333333333337], [778.0, 1.0], [807.0, 1.8666666666666663], [801.0, 0.8636363636363635], [800.0, 0.125], [814.0, 1.4696969696969697], [815.0, 1.6666666666666667], [812.0, 0.15384615384615385], [813.0, 2.010752688172043], [803.0, 2.0], [804.0, 1.7600000000000002], [805.0, 2.090909090909091], [806.0, 1.588235294117647], [816.0, 1.509433962264151], [831.0, 0.0], [829.0, 1.9333333333333331], [830.0, 1.4426229508196722], [824.0, 1.0], [827.0, 1.0], [828.0, 1.5], [817.0, 1.7692307692307692], [818.0, 1.6470588235294117], [819.0, 0.0], [820.0, 1.7999999999999998], [821.0, 1.769230769230769], [822.0, 1.4629629629629626], [823.0, 0.33333333333333337], [808.0, 1.4722222222222223], [809.0, 2.1666666666666656], [810.0, 1.818181818181818], [811.0, 2.0], [858.0, 2.3529411764705883], [832.0, 1.6774193548387097], [833.0, 3.447368421052632], [835.0, 0.0], [834.0, 0.8333333333333334], [837.0, 0.5], [836.0, 0.0], [839.0, 6.214285714285715], [838.0, 1.0], [856.0, 2.3137254901960773], [857.0, 1.1666666666666667], [859.0, 1.9344262295081969], [860.0, 1.9655172413793103], [862.0, 2.0], [861.0, 102.0], [863.0, 5.833333333333334], [842.0, 1.9999999999999998], [841.0, 7.071428571428571], [840.0, 8.0], [843.0, 1.3529411764705888], [844.0, 2.3809523809523805], [845.0, 2.3809523809523805], [846.0, 0.9642857142857147], [848.0, 1.0370370370370374], [849.0, 0.5], [850.0, 1.793103448275862], [851.0, 1.5384615384615383], [852.0, 1.0], [853.0, 1.1111111111111112], [854.0, 2.0], [855.0, 1.0], [869.0, 3.3333333333333335], [865.0, 19.58064516129032], [864.0, 2.333333333333333], [878.0, 15.529411764705882], [879.0, 59.75], [876.0, 12.099999999999998], [877.0, 37.60000000000001], [874.0, 2.0857142857142854], [875.0, 12.228070175438596], [866.0, 2.6], [867.0, 16.857142857142858], [868.0, 3.0], [870.0, 2.36], [871.0, 15.85714285714286], [888.0, 28.575757575757574], [889.0, 54.583333333333336], [890.0, 34.5], [891.0, 21.33333333333334], [892.0, 22.829268292682933], [893.0, 20.644444444444446], [894.0, 3.4285714285714284], [895.0, 40.41666666666666], [880.0, 21.416666666666664], [881.0, 84.63008130081299], [882.0, 101.55702917771883], [883.0, 2.0], [884.0, 13.774193548387096], [885.0, 42.666666666666664], [886.0, 11.686274509803921], [887.0, 9.777777777777779], [872.0, 2.5384615384615388], [873.0, 3.0], [903.0, 58.0], [899.0, 18.57142857142857], [896.0, 88.875], [911.0, 108.1875], [908.0, 14.142857142857144], [909.0, 113.33333333333333], [910.0, 18.36065573770492], [906.0, 27.714285714285715], [907.0, 12.384615384615385], [897.0, 44.375], [898.0, 2.5600000000000005], [900.0, 85.5], [901.0, 24.8], [902.0, 58.888888888888886], [913.0, 10.89655172413793], [912.0, 120.5], [926.0, 2.6363636363636362], [927.0, 99.0], [923.0, 2.357142857142857], [922.0, 111.66666666666667], [924.0, 34.53333333333333], [920.0, 2.1282051282051286], [921.0, 9.866666666666665], [914.0, 34.666666666666664], [915.0, 2.1727272727272724], [916.0, 103.25], [917.0, 79.5], [918.0, 44.14285714285714], [919.0, 24.207547169811324], [904.0, 51.43749999999999], [905.0, 47.6], [934.0, 2.8], [929.0, 4.963636363636363], [928.0, 13.733333333333334], [942.0, 2.6551724137931028], [943.0, 2.6666666666666665], [940.0, 3.1463414634146343], [941.0, 3.0], [938.0, 3.03448275862069], [939.0, 3.0], [930.0, 57.83333333333333], [931.0, 15.913043478260871], [932.0, 2.666666666666667], [935.0, 3.25], [952.0, 12.0], [953.0, 3.0416666666666665], [954.0, 3.55], [955.0, 3.0], [956.0, 3.3571428571428568], [957.0, 3.0], [959.0, 3.1111111111111116], [944.0, 3.0], [945.0, 3.5], [946.0, 3.3499999999999996], [947.0, 3.0], [948.0, 2.666666666666666], [949.0, 3.241379310344827], [950.0, 3.184615384615384], [951.0, 3.0], [936.0, 3.0270270270270268], [937.0, 3.122448979591837], [963.0, 3.847826086956523], [960.0, 4.0], [974.0, 9.6], [975.0, 4.0], [972.0, 4.277777777777778], [973.0, 4.333333333333333], [970.0, 5.0], [971.0, 4.242424242424242], [961.0, 4.448275862068966], [962.0, 4.102564102564102], [964.0, 4.578947368421052], [965.0, 4.0], [966.0, 3.9736842105263155], [967.0, 4.298701298701299], [976.0, 3.0], [991.0, 2.0], [989.0, 2.3199999999999994], [990.0, 1.9130434782608696], [986.0, 2.113636363636364], [987.0, 2.105263157894737], [984.0, 1.9333333333333333], [985.0, 2.0], [977.0, 3.0], [978.0, 2.2040816326530623], [979.0, 2.024390243902439], [980.0, 2.5], [981.0, 3.0], [982.0, 2.1842105263157894], [983.0, 1.8333333333333333], [968.0, 4.0], [969.0, 5.133333333333333], [995.0, 2.228571428571428], [992.0, 2.25], [993.0, 2.0555555555555554], [994.0, 2.583333333333333], [996.0, 2.8333333333333335], [997.0, 2.5531914893617014], [998.0, 3.0], [999.0, 22.400000000000006], [1000.0, 20.439983400662772], [1.0, 0.2]], "isOverall": false, "label": "jimmyli", "isController": false}, {"data": [[999.1811233822402, 20.41176628330883]], "isOverall": false, "label": "jimmyli-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1368001.6, "minX": 1.72485984E12, "maxY": 5563672.416666667, "series": [{"data": [[1.72486002E12, 5530344.783333333], [1.72485984E12, 1402767.9], [1.7248599E12, 5563672.416666667], [1.72486008E12, 5519170.083333333], [1.72486014E12, 4026441.033333333], [1.72485996E12, 5402734.833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72486002E12, 5394206.65], [1.72485984E12, 1368001.6], [1.7248599E12, 5426720.6], [1.72486008E12, 5383311.5], [1.72486014E12, 3927308.35], [1.72485996E12, 5269731.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72486014E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14.672149908304, "minX": 1.72485984E12, "maxY": 21.88790461283698, "series": [{"data": [[1.72486002E12, 20.758544808438145], [1.72485984E12, 14.672149908304], [1.7248599E12, 19.63002643806811], [1.72486008E12, 20.094467225239594], [1.72486014E12, 21.88790461283698], [1.72485996E12, 21.575841120345466]], "isOverall": false, "label": "jimmyli", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72486014E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14.67104311135324, "minX": 1.72485984E12, "maxY": 21.88769874664952, "series": [{"data": [[1.72486002E12, 20.758310900084396], [1.72485984E12, 14.67104311135324], [1.7248599E12, 19.629774066495933], [1.72486008E12, 20.094211453304286], [1.72486014E12, 21.88769874664952], [1.72485996E12, 21.57553427361595]], "isOverall": false, "label": "jimmyli", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72486014E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04701021548512817, "minX": 1.72485984E12, "maxY": 0.05994256509213354, "series": [{"data": [[1.72486002E12, 0.05364903845498622], [1.72485984E12, 0.04701021548512817], [1.7248599E12, 0.04777226784073169], [1.72486008E12, 0.05994256509213354], [1.72486014E12, 0.05926201338379954], [1.72485996E12, 0.0539087856261851]], "isOverall": false, "label": "jimmyli", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72486014E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72485984E12, "maxY": 267.0, "series": [{"data": [[1.72486002E12, 253.0], [1.72485984E12, 142.0], [1.7248599E12, 195.0], [1.72486008E12, 267.0], [1.72486014E12, 263.0], [1.72485996E12, 255.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72486002E12, 0.0], [1.72485984E12, 0.0], [1.7248599E12, 0.0], [1.72486008E12, 0.0], [1.72486014E12, 0.0], [1.72485996E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72486002E12, 24.0], [1.72485984E12, 28.0], [1.7248599E12, 34.0], [1.72486008E12, 34.0], [1.72486014E12, 35.0], [1.72485996E12, 31.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72486002E12, 43.0], [1.72485984E12, 67.0], [1.7248599E12, 47.0], [1.72486008E12, 63.0], [1.72486014E12, 123.0], [1.72485996E12, 102.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72486002E12, 10.0], [1.72485984E12, 9.0], [1.7248599E12, 21.0], [1.72486008E12, 19.0], [1.72486014E12, 12.0], [1.72485996E12, 22.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72486002E12, 32.0], [1.72485984E12, 37.0], [1.7248599E12, 36.0], [1.72486008E12, 36.0], [1.72486014E12, 77.0], [1.72485996E12, 40.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72486014E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 9679.0, "maxY": 27.0, "series": [{"data": [[34135.0, 21.0], [34263.0, 22.0], [34759.0, 13.0], [33655.0, 21.0], [34487.0, 14.0], [34279.0, 12.0], [34055.0, 19.0], [34119.0, 25.0], [33415.0, 8.0], [34871.0, 22.0], [35479.0, 16.0], [36615.0, 22.0], [35431.0, 12.0], [35383.0, 21.0], [35447.0, 11.0], [38407.0, 8.0], [37015.0, 17.0], [37031.0, 21.0], [37383.0, 19.0], [36951.0, 21.0], [17363.0, 13.0], [32083.0, 13.0], [33606.0, 20.0], [33990.0, 19.0], [33814.0, 23.0], [36598.0, 21.0], [36694.0, 21.0], [35302.0, 19.0], [35670.0, 13.0], [35206.0, 16.0], [35894.0, 23.0], [35910.0, 20.0], [36230.0, 10.0], [35638.0, 11.0], [35238.0, 22.0], [36870.0, 22.0], [38182.0, 21.0], [40022.0, 21.0], [39798.0, 23.0], [34485.0, 19.0], [35061.0, 24.0], [35253.0, 12.0], [35477.0, 11.0], [36117.0, 16.0], [35349.0, 10.0], [36373.0, 20.0], [35813.0, 7.0], [35605.0, 22.0], [36101.0, 21.0], [36933.0, 21.0], [37221.0, 7.0], [39317.0, 21.0], [39157.0, 14.0], [39813.0, 5.0], [41829.0, 19.0], [25450.0, 2.0], [29026.0, 25.0], [32098.0, 21.0], [32082.0, 13.0], [34724.0, 9.0], [35828.0, 21.0], [36244.0, 20.0], [36868.0, 12.0], [37108.0, 21.0], [37428.0, 19.0], [37412.0, 19.0], [40564.0, 22.0], [40580.0, 23.0], [41540.0, 6.0], [34787.0, 18.0], [34131.0, 22.0], [34483.0, 24.0], [34915.0, 23.0], [36467.0, 22.0], [36227.0, 19.0], [36675.0, 21.0], [36451.0, 18.0], [35699.0, 22.0], [38019.0, 23.0], [37155.0, 21.0], [37331.0, 20.0], [36915.0, 12.0], [37715.0, 12.0], [39075.0, 9.0], [40627.0, 9.0], [39619.0, 24.0], [40739.0, 18.0], [39091.0, 20.0], [33394.0, 22.0], [34530.0, 18.0], [34706.0, 24.0], [33634.0, 15.0], [34722.0, 10.0], [36482.0, 6.0], [36674.0, 6.0], [35618.0, 24.0], [36290.0, 22.0], [36706.0, 20.0], [34994.0, 23.0], [35794.0, 13.0], [36370.0, 17.0], [35218.0, 11.0], [36514.0, 21.0], [36578.0, 15.0], [35362.0, 10.0], [35522.0, 10.0], [38658.0, 20.0], [37970.0, 19.0], [39474.0, 18.0], [40018.0, 7.0], [34737.0, 18.0], [34625.0, 13.0], [33329.0, 8.0], [36689.0, 22.0], [36097.0, 22.0], [35281.0, 23.0], [35057.0, 15.0], [35809.0, 21.0], [37857.0, 11.0], [37905.0, 14.0], [37041.0, 17.0], [40273.0, 20.0], [41041.0, 21.0], [41537.0, 8.0], [32760.0, 23.0], [31992.0, 17.0], [34576.0, 18.0], [34160.0, 12.0], [34784.0, 22.0], [34848.0, 22.0], [35648.0, 15.0], [36528.0, 21.0], [35584.0, 21.0], [36736.0, 20.0], [35552.0, 19.0], [35872.0, 14.0], [35136.0, 20.0], [35536.0, 20.0], [37568.0, 15.0], [37696.0, 22.0], [37264.0, 12.0], [37488.0, 18.0], [40880.0, 23.0], [39136.0, 22.0], [39488.0, 15.0], [34367.0, 7.0], [33887.0, 21.0], [36591.0, 18.0], [36559.0, 22.0], [35967.0, 10.0], [35759.0, 22.0], [36703.0, 17.0], [35935.0, 21.0], [36639.0, 12.0], [35647.0, 21.0], [36783.0, 12.0], [37743.0, 21.0], [38239.0, 19.0], [39231.0, 11.0], [40831.0, 17.0], [39775.0, 15.0], [39375.0, 14.0], [31735.0, 13.0], [33582.0, 24.0], [34766.0, 24.0], [33982.0, 15.0], [35310.0, 16.0], [36734.0, 9.0], [35518.0, 10.0], [36398.0, 21.0], [35278.0, 8.0], [36446.0, 21.0], [36958.0, 18.0], [37790.0, 7.0], [38654.0, 17.0], [37982.0, 17.0], [37310.0, 21.0], [39518.0, 21.0], [40222.0, 13.0], [41870.0, 21.0], [44286.0, 21.0], [32813.0, 19.0], [34333.0, 18.0], [34797.0, 18.0], [36109.0, 8.0], [35581.0, 22.0], [35949.0, 21.0], [35389.0, 8.0], [35917.0, 22.0], [36141.0, 21.0], [35069.0, 17.0], [35437.0, 11.0], [9679.0, 1.0], [37357.0, 10.0], [38109.0, 13.0], [39549.0, 11.0], [39821.0, 21.0], [39917.0, 22.0], [43453.0, 9.0], [30798.0, 21.0], [31294.0, 27.0], [34748.0, 22.0], [33644.0, 19.0], [32844.0, 16.0], [33180.0, 15.0], [34540.0, 9.0], [35308.0, 13.0], [35036.0, 6.0], [35500.0, 9.0], [35516.0, 22.0], [36476.0, 21.0], [35068.0, 22.0], [35356.0, 21.0], [36332.0, 18.0], [38524.0, 20.0], [37980.0, 22.0], [38652.0, 13.0], [37852.0, 12.0], [37836.0, 16.0], [37788.0, 9.0], [37020.0, 23.0], [40252.0, 9.0], [41692.0, 20.0], [32891.0, 24.0], [33291.0, 23.0], [33499.0, 7.0], [33227.0, 17.0], [36571.0, 18.0], [35755.0, 23.0], [35403.0, 23.0], [36203.0, 25.0], [36171.0, 19.0], [38411.0, 11.0], [37451.0, 11.0], [38523.0, 23.0], [37947.0, 21.0], [36939.0, 14.0], [39115.0, 19.0], [39019.0, 15.0], [39723.0, 13.0], [39915.0, 12.0], [39371.0, 11.0], [41051.0, 19.0], [31261.0, 15.0], [34906.0, 24.0], [35946.0, 7.0], [34874.0, 20.0], [35642.0, 9.0], [35978.0, 20.0], [36650.0, 21.0], [35530.0, 18.0], [35578.0, 22.0], [35306.0, 13.0], [38858.0, 15.0], [36874.0, 20.0], [37018.0, 23.0], [38826.0, 21.0], [38266.0, 9.5], [37962.0, 22.0], [38938.0, 11.0], [39610.0, 22.0], [39786.0, 19.0], [39178.0, 18.0], [43770.0, 20.0], [33929.0, 17.0], [34393.0, 25.0], [34345.0, 11.0], [34121.0, 23.0], [35193.0, 21.0], [35417.0, 22.0], [35209.0, 8.0], [36377.0, 20.0], [36009.0, 9.0], [35033.0, 22.0], [36969.0, 21.0], [40009.0, 20.0], [32460.0, 24.0], [32676.0, 10.0], [34792.0, 7.0], [34760.0, 20.0], [34744.0, 9.0], [36680.0, 12.0], [35944.0, 23.0], [35832.0, 17.0], [35400.0, 21.0], [36280.0, 23.0], [35320.0, 22.0], [35720.0, 22.0], [38808.0, 7.0], [37384.0, 10.0], [40888.0, 21.0], [40008.0, 20.0], [41368.0, 20.0], [43736.0, 20.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44286.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 9679.0, "maxY": 27.0, "series": [{"data": [[34135.0, 21.0], [34263.0, 22.0], [34759.0, 13.0], [33655.0, 21.0], [34487.0, 14.0], [34279.0, 12.0], [34055.0, 19.0], [34119.0, 25.0], [33415.0, 8.0], [34871.0, 22.0], [35479.0, 16.0], [36615.0, 22.0], [35431.0, 12.0], [35383.0, 21.0], [35447.0, 11.0], [38407.0, 8.0], [37015.0, 17.0], [37031.0, 21.0], [37383.0, 19.0], [36951.0, 21.0], [17363.0, 13.0], [32083.0, 13.0], [33606.0, 20.0], [33990.0, 19.0], [33814.0, 23.0], [36598.0, 21.0], [36694.0, 21.0], [35302.0, 19.0], [35670.0, 13.0], [35206.0, 16.0], [35894.0, 23.0], [35910.0, 20.0], [36230.0, 10.0], [35638.0, 11.0], [35238.0, 22.0], [36870.0, 22.0], [38182.0, 21.0], [40022.0, 21.0], [39798.0, 23.0], [34485.0, 19.0], [35061.0, 24.0], [35253.0, 12.0], [35477.0, 11.0], [36117.0, 16.0], [35349.0, 10.0], [36373.0, 20.0], [35813.0, 7.0], [35605.0, 22.0], [36101.0, 21.0], [36933.0, 21.0], [37221.0, 7.0], [39317.0, 21.0], [39157.0, 14.0], [39813.0, 5.0], [41829.0, 19.0], [25450.0, 2.0], [29026.0, 25.0], [32098.0, 21.0], [32082.0, 13.0], [34724.0, 9.0], [35828.0, 21.0], [36244.0, 20.0], [36868.0, 12.0], [37108.0, 21.0], [37428.0, 19.0], [37412.0, 19.0], [40564.0, 22.0], [40580.0, 23.0], [41540.0, 6.0], [34787.0, 18.0], [34131.0, 22.0], [34483.0, 24.0], [34915.0, 23.0], [36467.0, 22.0], [36227.0, 19.0], [36675.0, 21.0], [36451.0, 18.0], [35699.0, 22.0], [38019.0, 23.0], [37155.0, 21.0], [37331.0, 20.0], [36915.0, 12.0], [37715.0, 12.0], [39075.0, 9.0], [40627.0, 9.0], [39619.0, 24.0], [40739.0, 18.0], [39091.0, 20.0], [33394.0, 22.0], [34530.0, 18.0], [34706.0, 24.0], [33634.0, 15.0], [34722.0, 10.0], [36482.0, 6.0], [36674.0, 6.0], [35618.0, 24.0], [36290.0, 22.0], [36706.0, 20.0], [34994.0, 23.0], [35794.0, 13.0], [36370.0, 17.0], [35218.0, 11.0], [36514.0, 21.0], [36578.0, 15.0], [35362.0, 10.0], [35522.0, 10.0], [38658.0, 20.0], [37970.0, 19.0], [39474.0, 18.0], [40018.0, 7.0], [34737.0, 18.0], [34625.0, 13.0], [33329.0, 8.0], [36689.0, 22.0], [36097.0, 22.0], [35281.0, 23.0], [35057.0, 15.0], [35809.0, 21.0], [37857.0, 11.0], [37905.0, 14.0], [37041.0, 17.0], [40273.0, 20.0], [41041.0, 21.0], [41537.0, 8.0], [32760.0, 23.0], [31992.0, 17.0], [34576.0, 18.0], [34160.0, 12.0], [34784.0, 22.0], [34848.0, 22.0], [35648.0, 15.0], [36528.0, 21.0], [35584.0, 21.0], [36736.0, 20.0], [35552.0, 19.0], [35872.0, 14.0], [35136.0, 20.0], [35536.0, 20.0], [37568.0, 15.0], [37696.0, 22.0], [37264.0, 12.0], [37488.0, 18.0], [40880.0, 23.0], [39136.0, 22.0], [39488.0, 15.0], [34367.0, 7.0], [33887.0, 21.0], [36591.0, 18.0], [36559.0, 22.0], [35967.0, 10.0], [35759.0, 22.0], [36703.0, 17.0], [35935.0, 21.0], [36639.0, 12.0], [35647.0, 21.0], [36783.0, 12.0], [37743.0, 21.0], [38239.0, 19.0], [39231.0, 11.0], [40831.0, 17.0], [39775.0, 15.0], [39375.0, 14.0], [31735.0, 13.0], [33582.0, 24.0], [34766.0, 24.0], [33982.0, 15.0], [35310.0, 16.0], [36734.0, 9.0], [35518.0, 10.0], [36398.0, 21.0], [35278.0, 8.0], [36446.0, 21.0], [36958.0, 18.0], [37790.0, 7.0], [38654.0, 17.0], [37982.0, 17.0], [37310.0, 21.0], [39518.0, 21.0], [40222.0, 13.0], [41870.0, 21.0], [44286.0, 21.0], [32813.0, 19.0], [34333.0, 18.0], [34797.0, 18.0], [36109.0, 8.0], [35581.0, 22.0], [35949.0, 21.0], [35389.0, 8.0], [35917.0, 22.0], [36141.0, 21.0], [35069.0, 17.0], [35437.0, 11.0], [9679.0, 1.0], [37357.0, 10.0], [38109.0, 13.0], [39549.0, 11.0], [39821.0, 21.0], [39917.0, 22.0], [43453.0, 9.0], [30798.0, 21.0], [31294.0, 27.0], [34748.0, 22.0], [33644.0, 19.0], [32844.0, 16.0], [33180.0, 15.0], [34540.0, 9.0], [35308.0, 13.0], [35036.0, 6.0], [35500.0, 9.0], [35516.0, 22.0], [36476.0, 21.0], [35068.0, 22.0], [35356.0, 21.0], [36332.0, 18.0], [38524.0, 20.0], [37980.0, 22.0], [38652.0, 13.0], [37852.0, 12.0], [37836.0, 16.0], [37788.0, 9.0], [37020.0, 23.0], [40252.0, 9.0], [41692.0, 20.0], [32891.0, 24.0], [33291.0, 23.0], [33499.0, 7.0], [33227.0, 17.0], [36571.0, 18.0], [35755.0, 23.0], [35403.0, 23.0], [36203.0, 25.0], [36171.0, 19.0], [38411.0, 11.0], [37451.0, 11.0], [38523.0, 23.0], [37947.0, 21.0], [36939.0, 14.0], [39115.0, 19.0], [39019.0, 15.0], [39723.0, 13.0], [39915.0, 12.0], [39371.0, 11.0], [41051.0, 19.0], [31261.0, 15.0], [34906.0, 24.0], [35946.0, 7.0], [34874.0, 20.0], [35642.0, 9.0], [35978.0, 20.0], [36650.0, 21.0], [35530.0, 18.0], [35578.0, 22.0], [35306.0, 13.0], [38858.0, 15.0], [36874.0, 20.0], [37018.0, 23.0], [38826.0, 21.0], [38266.0, 9.5], [37962.0, 22.0], [38938.0, 11.0], [39610.0, 22.0], [39786.0, 19.0], [39178.0, 18.0], [43770.0, 20.0], [33929.0, 17.0], [34393.0, 25.0], [34345.0, 11.0], [34121.0, 23.0], [35193.0, 21.0], [35417.0, 22.0], [35209.0, 8.0], [36377.0, 20.0], [36009.0, 9.0], [35033.0, 22.0], [36969.0, 21.0], [40009.0, 20.0], [32460.0, 24.0], [32676.0, 10.0], [34792.0, 7.0], [34760.0, 20.0], [34744.0, 9.0], [36680.0, 12.0], [35944.0, 23.0], [35832.0, 17.0], [35400.0, 21.0], [36280.0, 23.0], [35320.0, 22.0], [35720.0, 22.0], [38808.0, 7.0], [37384.0, 10.0], [40888.0, 21.0], [40008.0, 20.0], [41368.0, 20.0], [43736.0, 20.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44286.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9312.35, "minX": 1.72485984E12, "maxY": 36914.333333333336, "series": [{"data": [[1.72486002E12, 36686.28333333333], [1.72485984E12, 9312.35], [1.7248599E12, 36914.333333333336], [1.72486008E12, 36630.45], [1.72486014E12, 26699.716666666667], [1.72485996E12, 35860.816666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72486014E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9306.133333333333, "minX": 1.72485984E12, "maxY": 36916.46666666667, "series": [{"data": [[1.72486002E12, 36695.28333333333], [1.72485984E12, 9306.133333333333], [1.7248599E12, 36916.46666666667], [1.72486008E12, 36621.166666666664], [1.72486014E12, 26716.383333333335], [1.72485996E12, 35848.51666666667]], "isOverall": false, "label": "302", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72486014E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9306.133333333333, "minX": 1.72485984E12, "maxY": 36916.46666666667, "series": [{"data": [[1.72486002E12, 36695.28333333333], [1.72485984E12, 9306.133333333333], [1.7248599E12, 36916.46666666667], [1.72486008E12, 36621.166666666664], [1.72486014E12, 26716.383333333335], [1.72485996E12, 35848.51666666667]], "isOverall": false, "label": "jimmyli-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72486014E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9306.133333333333, "minX": 1.72485984E12, "maxY": 36916.46666666667, "series": [{"data": [[1.72486002E12, 36695.28333333333], [1.72485984E12, 9306.133333333333], [1.7248599E12, 36916.46666666667], [1.72486008E12, 36621.166666666664], [1.72486014E12, 26716.383333333335], [1.72485996E12, 35848.51666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72486014E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

