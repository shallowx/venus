package org.venus.admin.domain;

import lombok.*;
import lombok.extern.slf4j.Slf4j;
import org.venus.support.VenusBase62Encoder;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Converts a LinksRequest object to a LinksDao object.
 *
 * @param request Object containing link data to be converted.
 * @return A LinksDao object holding the converted data.
 */
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Slf4j
public class LinksDao {
    /**
     * The unique identifier for the link.
     */
    private long id;
    /**
     * Represents a unique identifier code for the URL mapping.
     * This code is either provided by the user or generated by the system using
     * DefaultBase62Encoder when not provided. It should conform to the 62-bit
     * encoded characters ([0-9], [a-z], [A-Z]) and be of length 8.
     */
    private String code;
    /**
     * Represents the HTTP redirect status code.
     * The value should be either 301 (permanent redirect) or 302 (temporary redirect).
     */
    private int redirect;
    /**
     * Represents the original URL that is to be shortened or otherwise managed in the LinksDao class.
     *
     * This field holds the original URL value provided by the user when they request the creation of a shortened or managed link.
     * It is crucial for storing the full destination link that the shortened URL will redirect to.
     * The original URL should not be empty and must adhere to a maximum length constraint of 500 characters to ensure it meets the system's requirements.
     */
    private String originalUrl;
    /**
     *
     */
    private LocalDateTime expiresAt;
    /**
     * Represents the active status of the link.
     *
     * The `isActive` variable indicates whether a link is active or not.
     * It can take one of two values:
     * - 0: indicating the link is inactive.
     * - 1: indicating the link is active.
     *
     * This variable is used to manage the lifecycle of the link,
     * determining if it should be available for redirection.
     */
    private short isActive;

    /**
     * Converts a LinksRequest object to a LinksDao object.
     *
     * @param request Object containing link data to be converted.
     * @return A LinksDao object holding the converted data.
     */
    public static LinksDao fromEntity(LinksRequest request) {
        String mappingCode = request.getCode();
        if (mappingCode == null || mappingCode.isEmpty()) {
            if (log.isInfoEnabled()) {
                log.info("Links URl mapping code: {}", mappingCode);
            }
            mappingCode = VenusBase62Encoder.INSTANCE.encode(request.getId());
        }

        return LinksDao.builder()
                .id(request.getId())
                .code(mappingCode)
                .redirect(request.getRedirect())
                .originalUrl(request.getOriginalUrl())
                .expiresAt(LocalDateTime.parse(request.getExpiresAt(), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .isActive(request.getIsActive())
                .build();
    }
}
