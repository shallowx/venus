package org.venus.openapi;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.*;
import org.venus.admin.domain.LinksDao;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * Represents an OpenAPI entity corresponding to a record in the "links" table.
 *
 * This class is used to persist and retrieve URL mapping information,
 * including the original URL, its short code, redirection status, and expiration details.
 * It implements the Serializable interface to support serialization of its instances.
 *
 * Annotations:
 * - @AllArgsConstructor: Generates a constructor with one parameter for each field in the class.
 * - @NoArgsConstructor: Generates a no-argument constructor.
 * - @Getter: Generates getter methods for all fields.
 * - @Setter: Generates setter methods for all fields.
 * - @Entity: Specifies that this class is an entity and is mapped to a database table.
 * - @Builder: Enables the Builder pattern for creating instances of this class.
 * - @Table: Specifies the table name in the database (name = "links").
 */
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Builder
@Table(name = "links")
public class OpenapiEntity implements Serializable {
    /**
     * Unique identifier for Serializable class versioning.
     *
     * This variable is utilized during the deserialization process
     * to ensure that a loaded class corresponds exactly to a serialized
     * object. If the loaded class does not match the serialized object,
     * an {@code InvalidClassException} is thrown. This helps in verifying
     * that the sender and receiver of a serialized object have compatible
     * classes with respect to serialization.
     *
     * The number is randomly generated and should be updated whenever
     * there are significant changes in the class structure that would
     * affect the serialization process.
     */
    @Serial
    private static final long serialVersionUID = 516186319936155584L;

    /**
     * Represents the unique identifier for the OpenapiEntity.
     */
    @Id
    private long id;
    /**
     * Represents a unique identifier code for the URL mapping.
     *
     * This code is either provided by the user or generated by the system using
     * DefaultBase62Encoder when not provided. It should conform to the 62-bit
     * encoded characters ([0-9], [a-z], [A-Z]) and be of length 8.
     */
    @Column(name = "code")
    private String code;
    /**
     * Represents the HTTP redirect status code in the OpenapiEntity.
     * The value should be either 301 (permanent redirect) or 302 (temporary redirect).
     */
    @Column(name = "redirect")
    private int redirect;
    /**
     * Represents the original URL that is to be shortened or managed in the `OpenapiEntity` class.
     *
     * This field holds the user-provided original URL when requesting the creation of a shortened or managed link.
     * It is crucial for storing the full destination link that the shortened URL will redirect to.
     * The original URL should not be empty and must meet the system's requirements, including a maximum length constraint of 500 characters.
     */
    @Column(name = "original_url")
    private String originalUrl;
    /**
     * Represents the date and time when the entity was created.
     *
     * This field is automatically populated at the time of entity creation
     * and is used to track the creation timestamp. It should not be modified
     * once set.
     */
    @Column(name = "created_at")
    private transient LocalDateTime createdAt;
    /**
     * Represents the timestamp at which the entity will expire.
     *
     * This field is used to keep track of when the entity is no longer valid or active.
     * The expiration date and time is stored as a LocalDateTime object.
     */
    @Column(name = "expires_at")
    private LocalDateTime expiresAt;
    /**
     * Represents the active status of the link.
     *
     * The `isActive` variable indicates whether a link is active or not.
     * It can take one of two values:
     * - 0: indicating the link is inactive.
     * - 1: indicating the link is active.
     *
     * This variable is used to manage the lifecycle of the link,
     * determining if it should be available for redirection.
     */
    @Column(name = "is_active")
    private short isActive;

    /**
     * Converts a {@link LinksDao} object into an {@link OpenapiEntity} object.
     *
     * @param dao the LinksDao object to convert, holding link data.
     * @return an {@link OpenapiEntity} object containing the converted data from the provided LinksDao.
     */
    public static OpenapiEntity from(LinksDao dao) {
        return OpenapiEntity.builder()
                .id(dao.getId())
                .redirect(dao.getRedirect())
                .code(dao.getCode())
                .originalUrl(dao.getOriginalUrl())
                .expiresAt(dao.getExpiresAt())
                .isActive(dao.getIsActive())
                .build();
    }

    /**
     * Checks if this {@code OpenapiEntity} object is equal to the specified object.
     *
     * @param o the object to be compared for equality with this {@code OpenapiEntity}
     * @return {@code true} if the specified object is equal to this {@code OpenapiEntity}; {@code false} otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OpenapiEntity entity = (OpenapiEntity) o;
        return redirect == entity.redirect
                && isActive == entity.isActive
                && Objects.equals(code, entity.code)
                && Objects.equals(originalUrl, entity.originalUrl)
                && Objects.equals(createdAt, entity.createdAt)
                && Objects.equals(expiresAt, entity.expiresAt);
    }

    /**
     * Computes a hash code for the OpenapiEntity object using its attributes.
     *
     * @return An integer representing the hash code of this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(code, redirect, originalUrl, createdAt, expiresAt, isActive);
    }

    /**
     * Returns a string representation of the OpenapiEntity object,
     * including the values of its id, code, redirect, originalUrl,
     * createdAt, expiresAt, and isActive fields.
     *
     * @return A string that represents the OpenapiEntity object.
     */
    @Override
    public String toString() {
        return "OpenapiEntity{" +
                "id=" + id +
                ", code='" + code + '\'' +
                ", redirect=" + redirect +
                ", originalUrl='" + originalUrl + '\'' +
                ", createdAt=" + createdAt +
                ", expiresAt=" + expiresAt +
                ", isActive=" + isActive +
                '}';
    }
}
